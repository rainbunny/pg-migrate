"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getPoolConfig = void 0;

var _getValue = require("./get-value");

const getPoolConfig = params => {
  const poolConfig = {
    host: (0, _getValue.getValue)(params.host, process.env.POSTGRES_HOST),
    database: (0, _getValue.getValue)(params.database, process.env.POSTGRES_DATABASE),
    port: +(0, _getValue.getValue)(params.port, process.env.POSTGRES_PORT),
    user: (0, _getValue.getValue)(params.user, process.env.POSTGRES_USER),
    password: (0, _getValue.getValue)(params.password, process.env.POSTGRES_PASSWORD),
    ssl: 'true'.localeCompare((0, _getValue.getValue)(params.ssl, process.env.POSTGRES_SSL), undefined, {
      sensitivity: 'base'
    }) === 0,
    connectionString: (0, _getValue.getValue)(params.connectionString, process.env.POSTGRES_CONNECTION_STRING)
  };

  if (!poolConfig.connectionString) {
    if (!poolConfig.host) {
      throw new Error('Host is required!');
    }

    if (!poolConfig.database) {
      throw new Error('Database is required!');
    }

    if (!Number.isInteger(poolConfig.port)) {
      throw new Error('Port is required!');
    }

    if (!poolConfig.user) {
      throw new Error('User is required!');
    }

    if (!poolConfig.password) {
      throw new Error('Password is required!');
    }
  }

  return poolConfig;
};

exports.getPoolConfig = getPoolConfig;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9nZXQtcG9vbC1jb25maWcudHMiXSwibmFtZXMiOlsiZ2V0UG9vbENvbmZpZyIsInBhcmFtcyIsInBvb2xDb25maWciLCJob3N0IiwicHJvY2VzcyIsImVudiIsIlBPU1RHUkVTX0hPU1QiLCJkYXRhYmFzZSIsIlBPU1RHUkVTX0RBVEFCQVNFIiwicG9ydCIsIlBPU1RHUkVTX1BPUlQiLCJ1c2VyIiwiUE9TVEdSRVNfVVNFUiIsInBhc3N3b3JkIiwiUE9TVEdSRVNfUEFTU1dPUkQiLCJzc2wiLCJsb2NhbGVDb21wYXJlIiwiUE9TVEdSRVNfU1NMIiwidW5kZWZpbmVkIiwic2Vuc2l0aXZpdHkiLCJjb25uZWN0aW9uU3RyaW5nIiwiUE9TVEdSRVNfQ09OTkVDVElPTl9TVFJJTkciLCJFcnJvciIsIk51bWJlciIsImlzSW50ZWdlciJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUNBOztBQUVPLE1BQU1BLGFBQWEsR0FBSUMsTUFBRCxJQUE4RDtBQUN6RixRQUFNQyxVQUFVLEdBQUc7QUFDakJDLElBQUFBLElBQUksRUFBRSx3QkFBU0YsTUFBTSxDQUFDRSxJQUFoQixFQUFzQkMsT0FBTyxDQUFDQyxHQUFSLENBQVlDLGFBQWxDLENBRFc7QUFFakJDLElBQUFBLFFBQVEsRUFBRSx3QkFBU04sTUFBTSxDQUFDTSxRQUFoQixFQUEwQkgsT0FBTyxDQUFDQyxHQUFSLENBQVlHLGlCQUF0QyxDQUZPO0FBR2pCQyxJQUFBQSxJQUFJLEVBQUUsQ0FBQyx3QkFBU1IsTUFBTSxDQUFDUSxJQUFoQixFQUFzQkwsT0FBTyxDQUFDQyxHQUFSLENBQVlLLGFBQWxDLENBSFU7QUFJakJDLElBQUFBLElBQUksRUFBRSx3QkFBU1YsTUFBTSxDQUFDVSxJQUFoQixFQUFzQlAsT0FBTyxDQUFDQyxHQUFSLENBQVlPLGFBQWxDLENBSlc7QUFLakJDLElBQUFBLFFBQVEsRUFBRSx3QkFBU1osTUFBTSxDQUFDWSxRQUFoQixFQUEwQlQsT0FBTyxDQUFDQyxHQUFSLENBQVlTLGlCQUF0QyxDQUxPO0FBTWpCQyxJQUFBQSxHQUFHLEVBQUUsT0FBT0MsYUFBUCxDQUFxQix3QkFBU2YsTUFBTSxDQUFDYyxHQUFoQixFQUFxQlgsT0FBTyxDQUFDQyxHQUFSLENBQVlZLFlBQWpDLENBQXJCLEVBQXFFQyxTQUFyRSxFQUFnRjtBQUFDQyxNQUFBQSxXQUFXLEVBQUU7QUFBZCxLQUFoRixNQUEyRyxDQU4vRjtBQU9qQkMsSUFBQUEsZ0JBQWdCLEVBQUUsd0JBQVNuQixNQUFNLENBQUNtQixnQkFBaEIsRUFBa0NoQixPQUFPLENBQUNDLEdBQVIsQ0FBWWdCLDBCQUE5QztBQVBELEdBQW5COztBQVNBLE1BQUksQ0FBQ25CLFVBQVUsQ0FBQ2tCLGdCQUFoQixFQUFrQztBQUNoQyxRQUFJLENBQUNsQixVQUFVLENBQUNDLElBQWhCLEVBQXNCO0FBQ3BCLFlBQU0sSUFBSW1CLEtBQUosQ0FBVSxtQkFBVixDQUFOO0FBQ0Q7O0FBRUQsUUFBSSxDQUFDcEIsVUFBVSxDQUFDSyxRQUFoQixFQUEwQjtBQUN4QixZQUFNLElBQUllLEtBQUosQ0FBVSx1QkFBVixDQUFOO0FBQ0Q7O0FBRUQsUUFBSSxDQUFDQyxNQUFNLENBQUNDLFNBQVAsQ0FBaUJ0QixVQUFVLENBQUNPLElBQTVCLENBQUwsRUFBd0M7QUFDdEMsWUFBTSxJQUFJYSxLQUFKLENBQVUsbUJBQVYsQ0FBTjtBQUNEOztBQUVELFFBQUksQ0FBQ3BCLFVBQVUsQ0FBQ1MsSUFBaEIsRUFBc0I7QUFDcEIsWUFBTSxJQUFJVyxLQUFKLENBQVUsbUJBQVYsQ0FBTjtBQUNEOztBQUVELFFBQUksQ0FBQ3BCLFVBQVUsQ0FBQ1csUUFBaEIsRUFBMEI7QUFDeEIsWUFBTSxJQUFJUyxLQUFKLENBQVUsdUJBQVYsQ0FBTjtBQUNEO0FBQ0Y7O0FBQ0QsU0FBT3BCLFVBQVA7QUFDRCxDQWhDTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHtQb29sQ29uZmlnfSBmcm9tICdwZyc7XG5pbXBvcnQge2dldFZhbHVlfSBmcm9tICcuL2dldC12YWx1ZSc7XG5cbmV4cG9ydCBjb25zdCBnZXRQb29sQ29uZmlnID0gKHBhcmFtczoge1tuYW1lOiBzdHJpbmddOiBzdHJpbmd9KTogUG9vbENvbmZpZyB8IHVuZGVmaW5lZCA9PiB7XG4gIGNvbnN0IHBvb2xDb25maWcgPSB7XG4gICAgaG9zdDogZ2V0VmFsdWUocGFyYW1zLmhvc3QsIHByb2Nlc3MuZW52LlBPU1RHUkVTX0hPU1QpLFxuICAgIGRhdGFiYXNlOiBnZXRWYWx1ZShwYXJhbXMuZGF0YWJhc2UsIHByb2Nlc3MuZW52LlBPU1RHUkVTX0RBVEFCQVNFKSxcbiAgICBwb3J0OiArZ2V0VmFsdWUocGFyYW1zLnBvcnQsIHByb2Nlc3MuZW52LlBPU1RHUkVTX1BPUlQpLFxuICAgIHVzZXI6IGdldFZhbHVlKHBhcmFtcy51c2VyLCBwcm9jZXNzLmVudi5QT1NUR1JFU19VU0VSKSxcbiAgICBwYXNzd29yZDogZ2V0VmFsdWUocGFyYW1zLnBhc3N3b3JkLCBwcm9jZXNzLmVudi5QT1NUR1JFU19QQVNTV09SRCksXG4gICAgc3NsOiAndHJ1ZScubG9jYWxlQ29tcGFyZShnZXRWYWx1ZShwYXJhbXMuc3NsLCBwcm9jZXNzLmVudi5QT1NUR1JFU19TU0wpLCB1bmRlZmluZWQsIHtzZW5zaXRpdml0eTogJ2Jhc2UnfSkgPT09IDAsXG4gICAgY29ubmVjdGlvblN0cmluZzogZ2V0VmFsdWUocGFyYW1zLmNvbm5lY3Rpb25TdHJpbmcsIHByb2Nlc3MuZW52LlBPU1RHUkVTX0NPTk5FQ1RJT05fU1RSSU5HKSxcbiAgfTtcbiAgaWYgKCFwb29sQ29uZmlnLmNvbm5lY3Rpb25TdHJpbmcpIHtcbiAgICBpZiAoIXBvb2xDb25maWcuaG9zdCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdIb3N0IGlzIHJlcXVpcmVkIScpO1xuICAgIH1cblxuICAgIGlmICghcG9vbENvbmZpZy5kYXRhYmFzZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdEYXRhYmFzZSBpcyByZXF1aXJlZCEnKTtcbiAgICB9XG5cbiAgICBpZiAoIU51bWJlci5pc0ludGVnZXIocG9vbENvbmZpZy5wb3J0KSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdQb3J0IGlzIHJlcXVpcmVkIScpO1xuICAgIH1cblxuICAgIGlmICghcG9vbENvbmZpZy51c2VyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VzZXIgaXMgcmVxdWlyZWQhJyk7XG4gICAgfVxuXG4gICAgaWYgKCFwb29sQ29uZmlnLnBhc3N3b3JkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Bhc3N3b3JkIGlzIHJlcXVpcmVkIScpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcG9vbENvbmZpZztcbn07XG4iXX0=
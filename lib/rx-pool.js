"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RxPool = void 0;

var _rxjs = require("rxjs");

var _operators = require("rxjs/operators");

var _pg = require("pg");

var _implementRxExecutor = require("./implement-rx-executor");

class RxPool extends _pg.Pool {
  constructor(config) {
    super(config);

    if (config) {
      const {
        log
      } = config;
      this.logQuery = log;
    }

    (0, _implementRxExecutor.implementRxExecutor)(this, this.logQuery);
  }
  /** Execute transaction.
   * Follow https://node-postgres.com/features/transactions
   */


  executeTransaction = transaction => (0, _rxjs.from)(this.connect()).pipe((0, _operators.map)(client => (0, _implementRxExecutor.implementRxExecutor)(client, this.logQuery)), (0, _operators.switchMap)(client => (0, _rxjs.of)({}).pipe((0, _operators.switchMap)(() => (0, _rxjs.from)(client.query('BEGIN'))), (0, _operators.switchMap)(() => transaction(client)), (0, _operators.switchMap)(() => (0, _rxjs.from)(client.query('COMMIT').then(() => client.release()))), (0, _operators.catchError)(err => (0, _rxjs.from)(client.query('ROLLBACK').then(() => client.release())).pipe((0, _operators.switchMap)(() => (0, _rxjs.throwError)(() => err)))))));
}

exports.RxPool = RxPool;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9yeC1wb29sLnRzIl0sIm5hbWVzIjpbIlJ4UG9vbCIsIlBnUG9vbCIsImNvbnN0cnVjdG9yIiwiY29uZmlnIiwibG9nIiwibG9nUXVlcnkiLCJleGVjdXRlVHJhbnNhY3Rpb24iLCJ0cmFuc2FjdGlvbiIsImNvbm5lY3QiLCJwaXBlIiwiY2xpZW50IiwicXVlcnkiLCJ0aGVuIiwicmVsZWFzZSIsImVyciJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUdBOztBQUVPLE1BQU1BLE1BQU4sU0FBcUJDLFFBQXJCLENBQXNEO0FBZTNEQyxFQUFBQSxXQUFXLENBQUNDLE1BQUQsRUFBOEI7QUFDdkMsVUFBTUEsTUFBTjs7QUFDQSxRQUFJQSxNQUFKLEVBQVk7QUFDVixZQUFNO0FBQUNDLFFBQUFBO0FBQUQsVUFBUUQsTUFBZDtBQUNBLFdBQUtFLFFBQUwsR0FBZ0JELEdBQWhCO0FBQ0Q7O0FBQ0Qsa0RBQW9CLElBQXBCLEVBQTBCLEtBQUtDLFFBQS9CO0FBQ0Q7QUFFRDtBQUNGO0FBQ0E7OztBQUNFQyxFQUFBQSxrQkFBa0IsR0FBSUMsV0FBRCxJQUNuQixnQkFBSyxLQUFLQyxPQUFMLEVBQUwsRUFBcUJDLElBQXJCLENBQ0Usb0JBQUtDLE1BQUQsSUFBa0MsOENBQTBDQSxNQUExQyxFQUFrRCxLQUFLTCxRQUF2RCxDQUF0QyxDQURGLEVBRUUsMEJBQVdLLE1BQUQsSUFDUixjQUFHLEVBQUgsRUFBT0QsSUFBUCxDQUNFLDBCQUFVLE1BQU0sZ0JBQUtDLE1BQU0sQ0FBQ0MsS0FBUCxDQUFhLE9BQWIsQ0FBTCxDQUFoQixDQURGLEVBRUUsMEJBQVUsTUFBTUosV0FBVyxDQUFDRyxNQUFELENBQTNCLENBRkYsRUFHRSwwQkFBVSxNQUFNLGdCQUFLQSxNQUFNLENBQUNDLEtBQVAsQ0FBYSxRQUFiLEVBQXVCQyxJQUF2QixDQUE0QixNQUFNRixNQUFNLENBQUNHLE9BQVAsRUFBbEMsQ0FBTCxDQUFoQixDQUhGLEVBSUUsMkJBQVlDLEdBQUQsSUFDVCxnQkFBS0osTUFBTSxDQUFDQyxLQUFQLENBQWEsVUFBYixFQUF5QkMsSUFBekIsQ0FBOEIsTUFBTUYsTUFBTSxDQUFDRyxPQUFQLEVBQXBDLENBQUwsRUFBNERKLElBQTVELENBQWlFLDBCQUFVLE1BQU0sc0JBQVcsTUFBTUssR0FBakIsQ0FBaEIsQ0FBakUsQ0FERixDQUpGLENBREYsQ0FGRixDQURnQjtBQTNCeUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2Zyb20sIHRocm93RXJyb3IsIG9mfSBmcm9tICdyeGpzJztcbmltcG9ydCB7Y2F0Y2hFcnJvciwgbWFwLCBzd2l0Y2hNYXB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7UG9vbCBhcyBQZ1Bvb2x9IGZyb20gJ3BnJztcbmltcG9ydCB0eXBlIHtPYnNlcnZhYmxlfSBmcm9tICdyeGpzJztcbmltcG9ydCB0eXBlIHtFeHRlbmRlZFBvb2xDb25maWcsIERiUXVlcnksIFJ4RXh0ZW5kZWRQb29sLCBSeEV4dGVuZGVkUG9vbENsaWVudH0gZnJvbSAnLi9pbnRlcmZhY2VzJztcbmltcG9ydCB7aW1wbGVtZW50UnhFeGVjdXRvcn0gZnJvbSAnLi9pbXBsZW1lbnQtcngtZXhlY3V0b3InO1xuXG5leHBvcnQgY2xhc3MgUnhQb29sIGV4dGVuZHMgUGdQb29sIGltcGxlbWVudHMgUnhFeHRlbmRlZFBvb2wge1xuICBwcml2YXRlIGxvZ1F1ZXJ5PzogRXh0ZW5kZWRQb29sQ29uZmlnWydsb2cnXTtcblxuICBleGVjdXRlUXVlcnk6IDxUPihxdWVyeTogRGJRdWVyeSkgPT4gT2JzZXJ2YWJsZTxUW10+O1xuXG4gIGNvdW50OiAocXVlcnk6IERiUXVlcnkpID0+IE9ic2VydmFibGU8bnVtYmVyPjtcblxuICBnZXRCeUlkOiAodGFibGU6IHN0cmluZykgPT4gPFJlY29yZCwgSWQ+KGlkOiBJZCwgZmllbGRzPzogc3RyaW5nW10sIGlkRmllbGQ/OiBzdHJpbmcpID0+IE9ic2VydmFibGU8UmVjb3JkPjtcblxuICBjcmVhdGU6ICh0YWJsZTogc3RyaW5nKSA9PiA8UmVjb3JkLCBJZD4ocmVjb3JkOiBQYXJ0aWFsPFJlY29yZD4pID0+IE9ic2VydmFibGU8SWQ+O1xuXG4gIHVwZGF0ZTogKHRhYmxlOiBzdHJpbmcpID0+IDxSZWNvcmQsIElkPihpZDogSWQsIHVwZGF0ZWREYXRhOiBQYXJ0aWFsPFJlY29yZD4sIGlkRmllbGQ/OiBzdHJpbmcpID0+IE9ic2VydmFibGU8dm9pZD47XG5cbiAgcmVtb3ZlOiAodGFibGU6IHN0cmluZykgPT4gPElkPihpZDogSWQsIGlkRmllbGQ/OiBzdHJpbmcpID0+IE9ic2VydmFibGU8dm9pZD47XG5cbiAgY29uc3RydWN0b3IoY29uZmlnPzogRXh0ZW5kZWRQb29sQ29uZmlnKSB7XG4gICAgc3VwZXIoY29uZmlnKTtcbiAgICBpZiAoY29uZmlnKSB7XG4gICAgICBjb25zdCB7bG9nfSA9IGNvbmZpZztcbiAgICAgIHRoaXMubG9nUXVlcnkgPSBsb2c7XG4gICAgfVxuICAgIGltcGxlbWVudFJ4RXhlY3V0b3IodGhpcywgdGhpcy5sb2dRdWVyeSk7XG4gIH1cblxuICAvKiogRXhlY3V0ZSB0cmFuc2FjdGlvbi5cbiAgICogRm9sbG93IGh0dHBzOi8vbm9kZS1wb3N0Z3Jlcy5jb20vZmVhdHVyZXMvdHJhbnNhY3Rpb25zXG4gICAqL1xuICBleGVjdXRlVHJhbnNhY3Rpb24gPSAodHJhbnNhY3Rpb246IChjbGllbnQ6IFJ4RXh0ZW5kZWRQb29sQ2xpZW50KSA9PiBPYnNlcnZhYmxlPHZvaWQ+KTogT2JzZXJ2YWJsZTx2b2lkPiA9PlxuICAgIGZyb20odGhpcy5jb25uZWN0KCkpLnBpcGUoXG4gICAgICBtYXAoKGNsaWVudDogUnhFeHRlbmRlZFBvb2xDbGllbnQpID0+IGltcGxlbWVudFJ4RXhlY3V0b3I8UnhFeHRlbmRlZFBvb2xDbGllbnQ+KGNsaWVudCwgdGhpcy5sb2dRdWVyeSkpLFxuICAgICAgc3dpdGNoTWFwKChjbGllbnQpID0+XG4gICAgICAgIG9mKHt9KS5waXBlKFxuICAgICAgICAgIHN3aXRjaE1hcCgoKSA9PiBmcm9tKGNsaWVudC5xdWVyeSgnQkVHSU4nKSkpLFxuICAgICAgICAgIHN3aXRjaE1hcCgoKSA9PiB0cmFuc2FjdGlvbihjbGllbnQpKSxcbiAgICAgICAgICBzd2l0Y2hNYXAoKCkgPT4gZnJvbShjbGllbnQucXVlcnkoJ0NPTU1JVCcpLnRoZW4oKCkgPT4gY2xpZW50LnJlbGVhc2UoKSkpKSxcbiAgICAgICAgICBjYXRjaEVycm9yKChlcnIpID0+XG4gICAgICAgICAgICBmcm9tKGNsaWVudC5xdWVyeSgnUk9MTEJBQ0snKS50aGVuKCgpID0+IGNsaWVudC5yZWxlYXNlKCkpKS5waXBlKHN3aXRjaE1hcCgoKSA9PiB0aHJvd0Vycm9yKCgpID0+IGVycikpKSxcbiAgICAgICAgICApLFxuICAgICAgICApLFxuICAgICAgKSxcbiAgICApO1xufVxuIl19
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.implementRxExecutor = void 0;

var _rxjs = require("rxjs");

var _executeQuery = require("./execute-query");

var _buildQuery = require("./build-query");

/* eslint-disable no-param-reassign */
const implementRxExecutor = (executor, log) => {
  /** Execute query */
  executor.executeQuery = query => {
    const {
      queryText,
      params
    } = (0, _buildQuery.buildQuery)(query);
    return (0, _rxjs.from)((0, _executeQuery.executeQuery)(executor, queryText, params, log).then(res => res.rows));
  };
  /** Count records in the query */


  executor.count = query => {
    const {
      queryText,
      params
    } = (0, _buildQuery.buildQuery)({ ...query,
      fields: [],
      pageIndex: undefined,
      rowsPerPage: undefined,
      sortBy: undefined,
      limit: undefined,
      offset: undefined
    });
    const countQueryText = `SELECT COUNT(*) FROM (${queryText}) AS T`;
    return (0, _rxjs.from)((0, _executeQuery.executeQuery)(executor, countQueryText, params, log).then(res => res.rows[0].count));
  };
  /** Get record by id */


  executor.getById = table => (id, fields, idField = 'id') => {
    const {
      queryText,
      params
    } = (0, _buildQuery.buildQuery)({
      table,
      whereClause: `${idField} = :id`,
      fields,
      params: {
        id
      }
    });
    return (0, _rxjs.from)((0, _executeQuery.executeQuery)(executor, queryText, params).then(res => res.rows.length > 0 ? res.rows[0] : undefined));
  };
  /** create new record */


  executor.create = table => record => {
    const paramNames = Object.keys(record);
    const params = paramNames.map(name => record[name]);
    const fieldsText = paramNames.join(',');
    const paramsText = Array.from(Array(paramNames.length), (_x, i) => `$${i + 1}`).join(',');
    const queryText = `INSERT INTO ${table}(${fieldsText}) VALUES(${paramsText}) RETURNING id`;
    return (0, _rxjs.from)((0, _executeQuery.executeQuery)(executor, queryText, params, log).then(res => res.rows[0].id));
  };
  /** update existing record */


  executor.update = table => (id, updatedData, idField = 'id') => {
    const paramNames = Object.keys(updatedData);
    const params = paramNames.map(name => updatedData[name]);
    const paramsText = paramNames.map((paramName, index) => `${paramName}=$${index + 2}`).join(',');
    const queryText = `UPDATE ${table} SET ${paramsText} WHERE ${idField} = $1`;
    return (0, _rxjs.from)((0, _executeQuery.executeQuery)(executor, queryText, [id, ...params], log).then(() => {// do nothing
    }));
  };
  /** delete existing record */


  executor.remove = table => (id, idField = 'id') => {
    const queryText = `DELETE FROM ${table} WHERE ${idField} = $1`;
    return (0, _rxjs.from)((0, _executeQuery.executeQuery)(executor, queryText, [id], log).then(() => {// do nothing
    }));
  };

  return executor;
};

exports.implementRxExecutor = implementRxExecutor;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
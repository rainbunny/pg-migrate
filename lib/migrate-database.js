"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.migrateDatabase = void 0;

var _pgExtensions = require("@rainbunny/pg-extensions");

var _fs = _interopRequireDefault(require("fs"));

var _rxjs = require("rxjs");

var _operators = require("rxjs/operators");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable no-console */
const createMigrationTableQuery = `
  CREATE TABLE IF NOT EXISTS migration(
      id INT PRIMARY KEY,
      version VARCHAR(4000) NOT NULL,
      createdAt BIGINT NOT NULL DEFAULT(
          extract(
              epoch
              from now()
          ) * 1000
      ) 
  );
`;
const getLatestVersionQuery = `
  SELECT id, version
  FROM migration
  ORDER BY id DESC
  LIMIT 1;
`;
const insertVersionQuery = `
  INSERT INTO migration(id, version) VALUES(:id, :version);
`;
const deleteVersionQuery = `
  DELETE FROM migration WHERE version = :version;
`;

const performMigration = ({
  currentVersion,
  mode,
  targetVersion,
  client,
  migrationFolder
}) => {
  const versionFilePaths = _fs.default.readdirSync(`${migrationFolder}/${mode}`);

  if (targetVersion && !versionFilePaths.includes(`${targetVersion}.sql`)) {
    throw new Error(`Invalid target version: ${targetVersion}`);
  }

  let currentId = currentVersion ? currentVersion.id : -1;
  const currentVer = currentVersion === null || currentVersion === void 0 ? void 0 : currentVersion.version;
  const currentVersionIndex = versionFilePaths.indexOf(`${currentVer}.sql`);
  const targetVersionIndex = versionFilePaths.indexOf(`${targetVersion}.sql`);
  let executor = (0, _rxjs.of)(undefined);

  if (mode === 'up') {
    versionFilePaths.filter((_versionFilePath, index) => index > currentVersionIndex && (!targetVersion || index <= targetVersionIndex)).forEach(versionFilePath => {
      executor = executor.pipe((0, _operators.tap)(() => console.log(`Migrating up ${versionFilePath}...`)), (0, _operators.switchMap)(() => client.executeQuery({
        queryText: _fs.default.readFileSync(`${migrationFolder}/${mode}/${versionFilePath}`, 'utf8')
      })), (0, _operators.switchMap)(() => {
        currentId += 1;
        return client.executeQuery({
          queryText: insertVersionQuery,
          params: {
            id: currentId,
            version: versionFilePath.split('.')[0]
          }
        }).pipe((0, _operators.map)(() => {// do nothing
        }));
      }));
    });
    return executor;
  }

  if (!targetVersion) {
    throw new Error(`Target version is required!`);
  }

  versionFilePaths.filter((_versionFilePath, index) => (!targetVersion || index > targetVersionIndex) && index <= currentVersionIndex).reverse().forEach(versionFilePath => {
    executor = executor.pipe((0, _operators.tap)(() => console.log(`Migrating down ${versionFilePath}...`)), (0, _operators.switchMap)(() => client.executeQuery({
      queryText: _fs.default.readFileSync(`${migrationFolder}/${mode}/${versionFilePath}`, 'utf8')
    })), (0, _operators.switchMap)(() => client.executeQuery({
      queryText: deleteVersionQuery,
      params: {
        version: versionFilePath.split('.')[0]
      }
    }).pipe((0, _operators.map)(() => {// do nothing
    }))));
  });
  return executor;
};

const migrateDatabase = params => {
  const {
    mode,
    targetVersion,
    migrationFolder,
    poolConfig
  } = params;
  new _pgExtensions.RxPool(poolConfig).executeTransaction(client => (0, _rxjs.of)({}).pipe((0, _operators.switchMap)(() => client.executeQuery({
    queryText: createMigrationTableQuery
  })), (0, _operators.switchMap)(() => client.executeQuery({
    queryText: getLatestVersionQuery
  })), (0, _operators.map)(latestVersion => latestVersion.length === 0 ? undefined : latestVersion[0]), (0, _operators.switchMap)(currentVersion => performMigration({
    mode,
    targetVersion,
    currentVersion,
    client,
    migrationFolder
  })))).subscribe({
    complete: () => {
      console.log('Migration completed.');
    },
    error: e => console.error(e)
  });
};

exports.migrateDatabase = migrateDatabase;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
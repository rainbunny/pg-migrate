"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.implementExecutor = void 0;

var _executeQuery = require("./execute-query");

var _buildQuery = require("./build-query");

/* eslint-disable no-param-reassign */
const implementExecutor = (executor, log) => {
  /** Execute query */
  executor.executeQuery = async query => {
    const {
      queryText,
      params
    } = (0, _buildQuery.buildQuery)(query);
    return (0, _executeQuery.executeQuery)(executor, queryText, params, log).then(res => res.rows);
  };
  /** Count records in the query */


  executor.count = async query => {
    const {
      queryText,
      params
    } = (0, _buildQuery.buildQuery)({ ...query,
      fields: [],
      pageIndex: undefined,
      rowsPerPage: undefined,
      sortBy: undefined,
      limit: undefined,
      offset: undefined
    });
    const countQueryText = `SELECT COUNT(*) FROM (${queryText}) AS T`;
    return (0, _executeQuery.executeQuery)(executor, countQueryText, params, log).then(res => res.rows[0].count);
  };
  /** Get record by id */


  executor.getById = table => async (id, fields, idField = 'id') => {
    const {
      queryText,
      params
    } = (0, _buildQuery.buildQuery)({
      table,
      whereClause: `${idField} = :id`,
      fields,
      params: {
        id
      }
    });
    return (0, _executeQuery.executeQuery)(executor, queryText, params).then(res => res.rows.length > 0 ? res.rows[0] : undefined);
  };
  /** create new record */


  executor.create = table => async record => {
    const paramNames = Object.keys(record);
    const params = paramNames.map(name => record[name]);
    const fieldsText = paramNames.join(',');
    const paramsText = Array.from(Array(paramNames.length), (_x, i) => `$${i + 1}`).join(',');
    const queryText = `INSERT INTO ${table}(${fieldsText}) VALUES(${paramsText}) RETURNING id`;
    return (0, _executeQuery.executeQuery)(executor, queryText, params, log).then(res => res.rows[0].id);
  };
  /** update existing record */


  executor.update = table => async (id, updatedData, idField = 'id') => {
    const paramNames = Object.keys(updatedData);
    const params = paramNames.map(name => updatedData[name]);
    const paramsText = paramNames.map((paramName, index) => `${paramName}=$${index + 2}`).join(',');
    const queryText = `UPDATE ${table} SET ${paramsText} WHERE ${idField} = $1`;
    await (0, _executeQuery.executeQuery)(executor, queryText, [id, ...params], log);
  };
  /** delete existing record */


  executor.remove = table => async (id, idField = 'id') => {
    const queryText = `DELETE FROM ${table} WHERE ${idField} = $1`;
    await (0, _executeQuery.executeQuery)(executor, queryText, [id], log);
  };

  return executor;
};

exports.implementExecutor = implementExecutor;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,